---
# It is necessary to set pmm_admin_credentials via your inventory
# This should ideally be encrypted and use either of the following in your environment:
# - ANSIBLE_VAULT_PASSWORD_FILE=/path/to/secret
# - ANSIBLE_ASK_VAULT_PASS=1
# Other environment variables my be required, such as ANSIBLE_VAULT_IDENTITY
# If you are using a token then set pmm_admin_credentials to the token value,
# otherwise when using a username and password then use the form username:password
# Automation will process the value as follows:
# pmm_admin_credentials | split(":")
# if empty then faile
# else if length is 1 then presume a token
# else presume a username and password
pmm_admin_credentials: "admin:admin"
pmm_admin_set_password: true
pmm_admin_token_validate: true

pmm_agent_token: ''
pmm_agent_setup_flags:
  server-address: '{{ pmm_server_host_public | default(hostvars[groups["monitors"] | first].ansible_host) }}:{{ pmm_server_port }}'
  server-username: api_key
  server-password: '{{ pmm_agent_token }}'
  server-insecure-tls: '{{ pmm_server_insecure }}'

pmm_template_folder: '{{ pmm_default_template_folder | default("DefaultFolder") }}'
pmm_alertmanager_contactpoint_uid: '{{ pmm_alertamanger_default_contactpoint_uid | default("DefaultContact_") }}'
pmm_templates_prefix: '{{ pmm_default_templates_prefix | default("DefaultPrefix_") }}'
pmm_alerting_runbook_path: 'https://localhost/runbooks/'              # path used in alert labels
pmm_alertmanager_rule_periods:                                        # Used to set the "for" duration in rules
  interval_unit: m
  low_interval: 1
  med_interval: 5
  high_interval: 10
  max_interval: 15

## Alert Manager Rules Thresholds
pmm_alertmanager_thr_PostgresqlCommitRateLow: 80
pmm_alertmanager_thr_DiskSpaceCritical: 10
pmm_alertmanager_thr_DiskSpaceWarning: 20
pmm_alertmanager_thr_NodeIOUtilization: 950
pmm_alertmanager_thr_CPUSaturationRDS: 0.8
pmm_alertmanager_thr_StaleUpload: 93600                           # In default it is 26h (60*60*26)
pmm_alertmanager_thr_StaleBackup: 93600                           # In default it is 26h (60*60*26)
pmm_alertmanager_thr_StaleBackupLog: 3900                         # In default it is 65m (60*65)
pmm_alertmanager_thr_StaleUploadLog: 3900

pmm_setup_alerting: true
pmm_delete_alert_rules: false
pmm_notification_services: ["mysql", "mongo", "generic", "agent", "proxysql", "postgresql", "backup"]

pmm_enable_all_alerts_for_service: []
#pmm_enable_all_alert_for_service: ["mysql", "mongo", "generic", "agent", "proxysql", "postgresql", "backup"]
pmm_enable_all_templates_for_service: []
#pmm_enable_all_templates_for_service: ["mysql", "mongo", "generic", "agent", "proxysql", "postgresql", "backup"]
pmm_alerts_for_services: []
pmm_alert_names: []
pmm_enabled_alerts: []

pmm_alert_list: []
#pmm_alert_list:
#  - name: DiskSpaceWarning
#    template_name: DiskSpaceWarning
#    threshold: 30
#    custom_labels:
#      label1: '1'
#      label2: '2'
#    filters:
#    - label: env
#      regexp: staging
#      type: MATCH
#    - label: node_name
#      regexp: db10
#      type: MISMATCH
#  - name: DiskSpaceWarning_diff_threshold
#    template_name: DiskSpaceWarning
#    threshold: 40
#    filters:
#    - label: env
#      regexp: prod
#      type: MATCH
#    - label: node_name
#      regexp: db11
#      type: MISMATCH
#  - name: MySQLInstanceNotAvailable
#    template_name: MySQLInstanceNotAvailable
#  - name: VmalertAlertsError

# Currently, only tarball client installs will be performed.
# OS packages and containers to be added later
pmm_client_home_dir: '{{ ansible_env.HOME }}'
pmm_client_deploy_using: tarball
pmm_client_extract_base: '{{ pmm_client_home_dir }}'
pmm_client_force_setup: false
pmm_client_tarball_uri: 'https://downloads.percona.com/downloads/pmm2/{{ pmm_version }}/binary/tarball/pmm2-client-{{ pmm_version }}.tar.gz'
pmm_client_tarball_uri_checksum: '{{ pmm_client_tarball_uri }}.sha256sum'

pmm_container_env:
  DATA_RETENTION: 720h
  DISABLE_TELEMETRY: 0
  DISABLE_UPDATES: 1
  ENABLE_ALERTING: 1
  ENABLE_AZUREDISCOVER: '{{ ("azure" in groups and groups["azure"] | length > 0) | int }}'
  ENABLE_BACKUP_MANAGEMENT: 0
  ENABLE_DBAAS: 0
  METRICS_RESOLUTION_HR: 5s
  METRICS_RESOLUTION_LR: 1h
  METRICS_RESOLUTION_MR: 5m
pmm_container_env_file: /usr/local/percona/.pmm-server
pmm_container_extra_args: ' --ulimit=host -p 8443:443/tcp --volume=pmm-data:/srv:z '
pmm_container_image_repo: '{{ "docker.io/perconalab" if [pmm_version] | intersect(["dev-latest"]) else "docker.io/percona" }}'
pmm_container_port: 8443
pmm_container_volume: pmm-data

pmm_deploy_using: '{{ container_engine | default("podman") }}'

pmm_manage_users: []
#- user: xxx
#  login: xxx
#  password: xxx | omit to avoid account creation
#  role: Admin | Editor | Viewer
#  is_grafana_admin: false | omit to avoid Grafana admin permissions
#  requires_token: true | omit or set to false to skip tokens

pmm_pagerduty_token: '{{ pagerduty | default("") }}'

# pmm_payload_add_base, plus variables derived from it, allow for
# customisation of the payload sent to PMM Server when adding a service.
pmm_payload_add_base:
  custom_labels:
    installer: gascan

pmm_payload_add_azure: '{{ pmm_payload_add_base }}'
pmm_payload_add_cloudsql: '{{ pmm_payload_add_base }}'
pmm_payload_add_haproxy: '{{ pmm_payload_add_base }}'
pmm_payload_add_mongodb: '{{ pmm_payload_add_base }}'
pmm_payload_add_mysql: '{{ pmm_payload_add_base }}'
pmm_payload_add_postgresql: '{{ pmm_payload_add_base }}'
pmm_payload_add_proxysql: '{{ pmm_payload_add_base }}'
pmm_payload_add_rds: '{{ pmm_payload_add_base }}'

pmm_server_host: 127.0.0.1
pmm_server_host_public: '{{ hostvars[groups["monitors"] | first].ansible_default_ipv4.address }}'
pmm_server_insecure: '{{ [pmm_server_host] | intersect(["localhost", "127.0.0.1"]) | length == 0 }}'
pmm_server_port: '{{ pmm_container_port }}'
pmm_server_schema: https

pmm_version: 2.31.0
...
